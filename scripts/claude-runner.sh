#!/bin/bash

# Claude Code Pro를 사용하는 로컬 실행 스크립트
# 이미 로그인된 Claude Code 세션을 활용

set -e

echo "🤖 Claude Code Task Runner (using existing session)"
echo "================================================"

# Git 최신 상태 가져오기 (remote가 있을 때만)
if git remote -v | grep -q origin; then
    echo "📥 Pulling latest changes..."
    git pull origin main || true
else
    echo "📥 Working locally (no remote configured)"
fi

# tasks 디렉토리에서 pending 작업 찾기
TASK_DIR="tasks"
if [ ! -d "$TASK_DIR" ]; then
    echo "No tasks directory found. Waiting for tasks..."
    exit 0
fi

# pending 상태의 작업 찾기 (task-*.json 또는 *.json 모두 확인)
for task_file in $TASK_DIR/*.json; do
    [ -e "$task_file" ] || continue
    
    # JSON 파싱 (jq가 없으면 grep 사용)
    if command -v jq &> /dev/null; then
        STATUS=$(jq -r '.status' "$task_file")
        TASK=$(jq -r '.task' "$task_file")
        ID=$(jq -r '.id' "$task_file")
        MACHINE=$(jq -r '.machine' "$task_file")
    else
        STATUS=$(grep -oP '"status":\s*"\K[^"]+' "$task_file" || echo "")
        TASK=$(grep -oP '"task":\s*"\K[^"]+' "$task_file" || echo "")
        ID=$(grep -oP '"id":\s*"\K[^"]+' "$task_file" || echo "")
        MACHINE=$(grep -oP '"machine":\s*"\K[^"]+' "$task_file" || echo "")
    fi
    
    # 현재 머신용 pending 작업만 처리 (hostname 또는 환경변수 MACHINE_NAME 사용)
    CURRENT_MACHINE="${MACHINE_NAME:-$(hostname)}"
    if [ "$STATUS" = "pending" ] && [ "$MACHINE" = "$CURRENT_MACHINE" ]; then
        echo "📋 Found task #$ID: $TASK"
        
        # 작업 상태를 in_progress로 변경
        sed -i '' 's/"status": "pending"/"status": "in_progress"/' "$task_file"
        git add "$task_file"
        git commit -m "task: Start processing task #$ID"
        
        # remote가 있을 때만 push
        if git remote -v | grep -q origin; then
            git push
        fi
        
        # CLAUDE.md 업데이트
        cat > CLAUDE.md << EOF
# Task #$ID

$TASK

## Guidelines
- Follow the development guidelines
- Write clean, maintainable code
- Add tests for new features
- Update documentation as needed
- Create meaningful commits
EOF
        
        # Claude Code 실행 (이미 로그인된 세션 사용)
        echo "🚀 Running Claude Code..."
        
        # 자동 승인 래퍼 사용
        SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
        if [ -f "$SCRIPT_DIR/claude-auto-wrapper.sh" ]; then
            timeout 60 "$SCRIPT_DIR/claude-auto-wrapper.sh" "$TASK" || true
        else
            claude "$TASK" || true
        fi
        
        # 변경사항 커밋
        if [ -n "$(git status --porcelain)" ]; then
            git add -A
            git commit -m "feat: Complete task #$ID - $TASK"
            
            # remote가 있을 때만 PR 생성
            if git remote -v | grep -q origin; then
                # PR 생성을 위한 브랜치 생성
                BRANCH_NAME="task-$ID-$(date +%s)"
                git checkout -b "$BRANCH_NAME"
                git push -u origin "$BRANCH_NAME"
            
                # GitHub CLI로 PR 생성 (설치되어 있다면)
                if command -v gh &> /dev/null; then
                    gh pr create \
                        --title "[Task #$ID] $TASK" \
                        --body "## Automated task completion

**Task ID**: $ID
**Description**: $TASK
**Completed by**: Claude Code on $(hostname)

This PR was automatically generated by the local Claude Code runner.
Changes will be reviewed by Gemini." \
                        --label "automated,claude-code"
                fi
                
                git checkout main
            fi
        fi
        
        # 작업 완료 표시
        sed -i '' 's/"status": "in_progress"/"status": "completed"/' "$task_file"
        git add "$task_file"
        git commit -m "task: Complete task #$ID"
        
        # remote가 있을 때만 push
        if git remote -v | grep -q origin; then
            git push
        fi
        
        echo "✅ Task #$ID completed!"
        break  # 한 번에 하나의 작업만 처리
    fi
done

echo "🔄 Runner cycle complete"
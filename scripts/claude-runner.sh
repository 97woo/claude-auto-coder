#!/bin/bash

# Claude Code Pro를 사용하는 로컬 실행 스크립트
# 이미 로그인된 Claude Code 세션을 활용

set -e

echo "🤖 Claude Code Task Runner (using existing session)"
echo "================================================"

# Git 최신 상태 가져오기 (remote가 있을 때만)
if git remote -v | grep -q origin; then
    echo "📥 Pulling latest changes..."
    git pull origin main || true
else
    echo "📥 Working locally (no remote configured)"
fi

# tasks 디렉토리에서 pending 작업 찾기
TASK_DIR="tasks"
if [ ! -d "$TASK_DIR" ]; then
    echo "No tasks directory found. Waiting for tasks..."
    exit 0
fi

# pending 상태의 작업 찾기 (task-*.json 또는 *.json 모두 확인)
for task_file in $TASK_DIR/*.json; do
    [ -e "$task_file" ] || continue
    
    # JSON 파싱 (jq가 없으면 grep 사용)
    if command -v jq &> /dev/null; then
        STATUS=$(jq -r '.status' "$task_file")
        TASK=$(jq -r '.task' "$task_file")
        ID=$(jq -r '.id' "$task_file")
        MACHINE=$(jq -r '.machine' "$task_file")
    else
        STATUS=$(grep -oP '"status":\s*"\K[^"]+' "$task_file" || echo "")
        TASK=$(grep -oP '"task":\s*"\K[^"]+' "$task_file" || echo "")
        ID=$(grep -oP '"id":\s*"\K[^"]+' "$task_file" || echo "")
        MACHINE=$(grep -oP '"machine":\s*"\K[^"]+' "$task_file" || echo "")
    fi
    
    # 현재 머신용 pending 작업만 처리 (hostname 또는 환경변수 MACHINE_NAME 사용)
    CURRENT_MACHINE="${MACHINE_NAME:-$(hostname)}"
    if [ "$STATUS" = "pending" ] && [ "$MACHINE" = "$CURRENT_MACHINE" ]; then
        echo "📋 Found task #$ID: $TASK"
        
        # 작업 상태를 in_progress로 변경
        sed -i '' 's/"status": "pending"/"status": "in_progress"/' "$task_file"
        git add "$task_file"
        git commit -m "task: Start processing task #$ID"
        
        # remote가 있을 때만 push
        if git remote -v | grep -q origin; then
            git push
        fi
        
        # CLAUDE.md 업데이트
        cat > CLAUDE.md << EOF
# Task #$ID

$TASK

## Guidelines
- Follow the development guidelines
- Write clean, maintainable code
- Add tests for new features
- Update documentation as needed
- Create meaningful commits
EOF
        
        # Claude Code 실행 (이미 로그인된 세션 사용)
        echo "🚀 Running Claude Code..."
        
        # 권한 자동 승인 옵션으로 실행
        claude --dangerously-skip-permissions "$TASK" || true
        
        # 변경사항 커밋
        if [ -n "$(git status --porcelain)" ]; then
            git add -A
            git commit -m "feat: Complete task #$ID - $TASK"
            
            # remote가 있을 때만 PR 생성
            if git remote -v | grep -q origin; then
                # PR 생성을 위한 브랜치 생성
                BRANCH_NAME="task-$ID-$(date +%s)"
                git checkout -b "$BRANCH_NAME"
                git push -u origin "$BRANCH_NAME"
            
                # GitHub CLI로 PR 생성 (설치되어 있다면)
                if command -v gh &> /dev/null; then
                    gh pr create \
                        --title "[Task #$ID] $TASK" \
                        --body "## Automated task completion

**Task ID**: $ID
**Description**: $TASK
**Completed by**: Claude Code on $(hostname)

This PR was automatically generated by the local Claude Code runner.
Changes will be reviewed by Gemini." \
                        --label "automated,claude-code"
                fi
                
                git checkout main
            fi
        fi
        
        # 작업 완료 표시
        sed -i '' 's/"status": "in_progress"/"status": "completed"/' "$task_file"
        git add "$task_file"
        git commit -m "task: Complete task #$ID"
        
        # remote가 있을 때만 push
        if git remote -v | grep -q origin; then
            git push
        fi
        
        echo "✅ Task #$ID completed!"
        
        # Gemini 리뷰 자동 실행
        echo "🔍 Running Gemini review..."
        # 최근 커밋에서 변경된 코드 파일 찾기
        CHANGED_FILES=$(git diff HEAD~1 --name-only 2>/dev/null | grep -E '\.(js|ts|jsx|tsx|py|go|java|cpp|c|rs)$' || true)
        
        if [ -z "$CHANGED_FILES" ]; then
            # HEAD~1이 없으면 전체 파일 확인
            CHANGED_FILES=$(git ls-files | grep -E '\.(js|ts|jsx|tsx|py|go|java|cpp|c|rs)$' || true)
        fi
        
        if [ -n "$CHANGED_FILES" ]; then
            echo "Files to review: $CHANGED_FILES"
            export CHANGED_FILES
            # .env 파일에서 GEMINI_API_KEY 로드
            if [ -f ".env" ]; then
                export $(grep GEMINI_API_KEY .env | xargs)
            fi
            
            if [ -z "$GEMINI_API_KEY" ]; then
                echo "⚠️ GEMINI_API_KEY not found in .env file, skipping review..."
            else
                export GEMINI_API_KEY
                
                # 현재 스크립트 디렉토리 찾기
                SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
                PROJECT_ROOT="$( cd "$SCRIPT_DIR/.." && pwd )"
                
                # src/review.js가 있는지 확인
                REVIEW_SCRIPT="$PROJECT_ROOT/src/review.js"
                if [ -f "$REVIEW_SCRIPT" ]; then
                    cd "$PROJECT_ROOT"
                    node src/review.js || echo "⚠️ Review failed but continuing..."
                    cd - > /dev/null
                else
                    echo "⚠️ Review script not found at $REVIEW_SCRIPT"
                fi
            fi
            
            # 리뷰 결과가 있으면 자동 개선
            if [ -f "review-results.json" ] && [ -s "review-results.json" ]; then
                echo "📝 Processing review results..."
                
                # 리뷰 내용을 파일로 저장하여 Claude에 전달
                REVIEW_CONTENT=$(cat review-results.json | python3 -c '
import json, sys
try:
    data = json.load(sys.stdin)
    if isinstance(data, list) and len(data) > 0:
        for item in data:
            comment = item.get("comment", "")
            path = item.get("path", "")
            # Extract nested JSON
            import re
            if "```json" in comment:
                json_match = re.search(r"```json\n(.+?)\n```", comment, re.DOTALL)
                if json_match:
                    nested_data = json.loads(json_match.group(1))
                    print(f"File: {path}")
                    for issue in nested_data[:5]:  # Top 5 issues
                        line = issue.get("line", "")
                        severity = issue.get("severity", "")
                        comment_text = issue.get("comment", "")
                        if severity in ["error", "warning"]:
                            print(f"  Line {line} [{severity}]: {comment_text[:100]}")
except Exception as e:
    pass
' 2>/dev/null || echo "")
                
                if [ -n "$REVIEW_CONTENT" ]; then
                    echo "Review feedback to apply:"
                    echo "$REVIEW_CONTENT"
                    
                    # 리뷰 내용을 임시 파일에 저장
                    echo "$REVIEW_CONTENT" > review-feedback.txt
                    
                    # 변경된 파일 목록 가져오기
                    FILES_TO_IMPROVE=$(echo "$CHANGED_FILES" | head -1)
                    
                    # Claude로 개선 실행 - 구체적인 파일과 리뷰 내용 전달
                    if [ -n "$FILES_TO_IMPROVE" ]; then
                        echo "🔧 Applying improvements to $FILES_TO_IMPROVE..."
                        
                        # Claude에게 구체적인 개선 지시
                        IMPROVEMENT_PROMPT="Based on this code review feedback, improve the file $FILES_TO_IMPROVE:

$(cat review-feedback.txt)

Focus on fixing errors and warnings. Keep the same functionality but improve code quality."
                        
                        claude --dangerously-skip-permissions "$IMPROVEMENT_PROMPT" || true
                        
                        # 개선사항 커밋
                        if [ -n "$(git status --porcelain)" ]; then
                            git add -A
                            git commit -m "refactor: Apply Gemini review improvements

Automatic improvements based on code review:
$REVIEW_CONTENT"
                            
                            # Push 개선사항
                            if git remote -v | grep -q origin; then
                                git push
                            fi
                            
                            echo "✅ Improvements applied and committed!"
                        else
                            echo "ℹ️ No changes were made"
                        fi
                        
                        # 임시 파일 삭제
                        rm -f review-feedback.txt
                    fi
                else
                    echo "ℹ️ No actionable review feedback found"
                fi
            fi
        fi
        
        break  # 한 번에 하나의 작업만 처리
    fi
done

echo "🔄 Runner cycle complete"